/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package battletank;

import java.awt.Color;
import java.awt.Rectangle;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Administrator
 */
public class BattleScreen extends javax.swing.JFrame {

    Game game;
    DrawBattleScreen battleScreen;

    /**
     * Creates new form BattleScreen
     */
    public BattleScreen() {
        initComponents();
    }

    public BattleScreen(Game game) {
        initComponents();
        this.game = game;
        this.setLocation(230, 50);
        
        if (game.getSetting().getCurrentTeamAction() == "A") {
            this.btnActionB.show(false);
        } else {
              this.btnActionA.show(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtDecisionActionA = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDecisionActionB = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCommandB = new javax.swing.JTextField();
        txtSourceB = new javax.swing.JTextField();
        txtDestinationB = new javax.swing.JTextField();
        txtCommandA = new javax.swing.JTextField();
        txtSourceA = new javax.swing.JTextField();
        txtDestinationA = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnActionA = new javax.swing.JButton();
        btnActionB = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtSetting = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Battle Tank"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        txtDecisionActionA.setEditable(false);
        txtDecisionActionA.setColumns(20);
        txtDecisionActionA.setRows(5);
        txtDecisionActionA.setAutoscrolls(false);
        txtDecisionActionA.setPreferredSize(new java.awt.Dimension(200, 150));
        jScrollPane1.setViewportView(txtDecisionActionA);

        txtDecisionActionB.setColumns(20);
        txtDecisionActionB.setRows(5);
        txtDecisionActionB.setPreferredSize(new java.awt.Dimension(200, 150));
        jScrollPane2.setViewportView(txtDecisionActionB);

        jLabel1.setText("TEAM B DECISION");

        jLabel2.setText("TEAM A DECISION");

        txtCommandB.setPreferredSize(new java.awt.Dimension(200, 30));

        txtSourceB.setPreferredSize(new java.awt.Dimension(200, 30));
        txtSourceB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSourceBActionPerformed(evt);
            }
        });

        txtDestinationB.setPreferredSize(new java.awt.Dimension(200, 30));

        txtCommandA.setMinimumSize(new java.awt.Dimension(6, 40));
        txtCommandA.setPreferredSize(new java.awt.Dimension(200, 30));

        txtSourceA.setPreferredSize(new java.awt.Dimension(200, 30));

        txtDestinationA.setPreferredSize(new java.awt.Dimension(200, 30));

        jLabel3.setText("COMMAND");

        jLabel4.setText("SOURCE");

        jLabel5.setText("DESTINATION");

        jLabel6.setText("COMMAND");

        jLabel7.setText("SOURCE");

        jLabel8.setText("DESTINATION");

        btnActionA.setText("Action !");
        btnActionA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnActionAMouseClicked(evt);
            }
        });

        btnActionB.setText("Action !");
        btnActionB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnActionBMouseClicked(evt);
            }
        });

        txtSetting.setColumns(20);
        txtSetting.setRows(5);
        txtSetting.setPreferredSize(new java.awt.Dimension(200, 400));
        jScrollPane3.setViewportView(txtSetting);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(93, 93, 93))
            .addGroup(layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(btnActionA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnActionB)
                .addGap(80, 80, 80))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtCommandA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSourceA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtDestinationA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane3))
                .addGap(824, 824, 824)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtCommandB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtSourceB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDestinationB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCommandB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCommandA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSourceB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSourceA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDestinationB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDestinationA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel8)))
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnActionA)
                    .addComponent(btnActionB))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        battleScreen = new DrawBattleScreen(game);
        battleScreen.setLocation(300, 25);
        battleScreen.setSize(800, 800);
        battleScreen.setBackground(Color.white);
        battleScreen.setVisible(true);
        this.add(battleScreen);
        battleScreen.validate();        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void txtSourceBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSourceBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSourceBActionPerformed

    private void btnActionAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnActionAMouseClicked
        String command = this.txtCommandA.getText();
        int sx, sy, dx, dy;
        String temp[] = new String[2];
        temp = this.txtSourceA.getText().split(" ");
        sx = Integer.parseInt(temp[0]);
        sy = Integer.parseInt(temp[1]);
        temp = this.txtDestinationA.getText().split(" ");
        dx = Integer.parseInt(temp[0]);
        dy = Integer.parseInt(temp[1]);

        String file_desicionActionA = Paths.get("").toAbsolutePath().toString() + "/src/battletank/" + "Report/teamA/" + game.getSetting().getMatchID() + "_decision_action_A.txt";
        // writer file
        Writer writerTeamA = null;
        File f = new File(file_desicionActionA);
        if (f.exists() && !f.isDirectory()) {

            try {
                writerTeamA = new BufferedWriter(new FileWriter(new File(file_desicionActionA)));

                writerTeamA.write(game.getTeamA().getTeamName() + "\n");
                writerTeamA.write(command + "\n");
                writerTeamA.write(sx + " " + sy);
                writerTeamA.write(" " + dx + " " + dy + "\n");
                writerTeamA.close();

            } catch (IOException ex) {
                Logger.getLogger(BattleScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        this.btnActionB.show();
        this.btnActionA.show(false);
        runTest();
    }//GEN-LAST:event_btnActionAMouseClicked

    private void btnActionBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnActionBMouseClicked
        String command = this.txtCommandB.getText();
        int sx, sy, dx, dy;
        String temp[] = new String[2];
        temp = this.txtSourceB.getText().split(" ");
        sx = Integer.parseInt(temp[0]);
        sy = Integer.parseInt(temp[1]);
        temp = this.txtDestinationB.getText().split(" ");
        dx = Integer.parseInt(temp[0]);
        dy = Integer.parseInt(temp[1]);

        String file_desicionActionB = Paths.get("").toAbsolutePath().toString() + "/src/battletank/" + "Report/teamB/" + game.getSetting().getMatchID() + "_decision_action_B.txt";
        // writer file
        Writer writerTeamB = null;
        File f = new File(file_desicionActionB);
        if (f.exists() && !f.isDirectory()) {

            try {
                writerTeamB = new BufferedWriter(new FileWriter(new File(file_desicionActionB)));

                writerTeamB.write(game.getTeamB().getTeamName() + "\n");
                writerTeamB.write(command + "\n");
                writerTeamB.write(sx + " " + sy);
                writerTeamB.write(" " + dx + " " + dy + "\n");

                writerTeamB.close();
            } catch (IOException ex) {
                Logger.getLogger(BattleScreen.class.getName()).log(Level.SEVERE, null, ex);
            }

            // TODO add your handling code here:
    }//GEN-LAST:event_btnActionBMouseClicked
       this.btnActionA.show();
        this.btnActionB.show(false);
        runTest();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BattleScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BattleScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BattleScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BattleScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BattleScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActionA;
    private javax.swing.JButton btnActionB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField txtCommandA;
    private javax.swing.JTextField txtCommandB;
    private javax.swing.JTextArea txtDecisionActionA;
    private javax.swing.JTextArea txtDecisionActionB;
    private javax.swing.JTextField txtDestinationA;
    private javax.swing.JTextField txtDestinationB;
    private javax.swing.JTextArea txtSetting;
    private javax.swing.JTextField txtSourceA;
    private javax.swing.JTextField txtSourceB;
    // End of variables declaration//GEN-END:variables

    public void runTest() {
        // update Game
        game.updateGame();
        String setting = "";
        // show current statistic
        setting = ("MATCH : " + game.getSetting().getMatchID());
        setting += "\n" + ("TEAM A : " + game.getSetting().getNameTeamA());
        setting += "\n" + ("TEAM B : " + game.getSetting().getNameTeamB());
        setting += "\n" + ("NUM OF TANK : " + game.getSetting().getNumOfTank());
        setting += "\n" + ("DEFAULT MONEY : " + game.getSetting().getDefaultMoney());
        setting += "\n" + ("NUM OF TURN : " + game.getSetting().getNumOfTurn());
        setting += "\n" + ("NUM OF TURN : " + game.getSetting().getNumOfTurn());

        setting += "\n\n" + ("========") + "\n\n";
        setting += "\n" + ("CURRENT BET TURN : " + game.getSetting().getCurrentBetTurn());
        setting += "\n" + ("MONEY TEAM A : " + game.getTeamA().getMoney());
        setting += "\n" + ("MONEY TEAM B: " + game.getTeamB().getMoney());
        setting += "\n" + ("GAME STATE : " + game.getSetting().getGameState());
        setting += "\n" + ("CURRENT TEAM ACTION : " + game.getSetting().getCurrentTeamAction());
        
        setting += "\n" + ("POINT TEAM A : " + game.getTeamA().getPoint());
        setting += "\n" + ("POINT TEAM B: " + game.getTeamB().getPoint());
        
        setting += "\n" + ("WINNER : " + game.getSetting().getWinner());

        String decisionActionB = "";
        String decisionActionA = "";
        try {
            if (game.getSetting().getGameState() == Setting.GAME_STATE.ACTION) {
        // show action decision of each team
                // team A
                if (game.getSetting().getCurrentTeamAction() == "B") {
                    decisionActionB = "";
                    decisionActionA = "COMMAND :";
                    decisionActionA += game.getTeamA().getDecisionAction().getCommand() + "\n";
                    decisionActionA += "SOURCE : ( " + game.getTeamA().getDecisionAction().getSource().getX() + " , " + game.getTeamA().getDecisionAction().getSource().getY() + ") \n";
                    decisionActionA += "DESTINATION : ( " + game.getTeamA().getDecisionAction().getDestination().getX() + " , " + game.getTeamA().getDecisionAction().getDestination().getY() + ") \n";
                }
                if (game.getSetting().getCurrentTeamAction() == "A") {
                    // team B
                    decisionActionA = "";
                    decisionActionB = "COMMAND :";
                    decisionActionB += game.getTeamB().getDecisionAction().getCommand() + "\n";
                    decisionActionB += "SOURCE : ( " + game.getTeamB().getDecisionAction().getSource().getX() + " , " + game.getTeamB().getDecisionAction().getSource().getY() + ") \n";
                    decisionActionB += "DESTINATION : ( " + game.getTeamB().getDecisionAction().getDestination().getX() + " , " + game.getTeamB().getDecisionAction().getDestination().getY() + ") \n";
                }
            }

        } catch (Exception ex) {
        }

        this.txtSetting.setText(setting);

        this.txtDecisionActionA.setText(decisionActionA);
        this.txtDecisionActionB.setText(decisionActionB);
        battleScreen.update(game);
        battleScreen.validate();

    }
}
