/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package battletank;

import battletank.geneticAlgorithm.Population;
import java.awt.Color;
import java.io.FileNotFoundException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

import battletank.geneticAlgorithm.*;
/**
 *
 * @author Asus
 */
public class AutoGameScreen extends javax.swing.JFrame {

    /**
     * Creates new form AutoGameScreen
     */
      public AutoGame game;
    
      DrawBattleScreen battleScreen;
    
      Population population ;
    
    
    
    public AutoGameScreen() {
        initComponents();
        this.game = new AutoGame();
     
        game.setReport( new Report(1));
        try {
            this.game.getReport().readSetting(game);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AutoGameScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.setLocation(0, 0);
       
        this.getContentPane().setBackground(Color.BLACK);
        
         battleScreen = new DrawBattleScreen(game);
        battleScreen.setLocation(300, 50);
        battleScreen.setSize(800, 800);
        battleScreen.setBackground(Color.white);
        battleScreen.setVisible(true);
      //  this.add(battleScreen);
      //  battleScreen.validate();    
        game.nextTournamentMatch();
        game.createNextMatch();
        
         game.getPopulation().getChromosomes()[0].setGen( new int[] {1,1,10,100} );
       
    }
  
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtActionInfo = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtChromosomeInfo = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtPointInfo = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtGenerationInfo = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtTankInfo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setMaximumSize(new java.awt.Dimension(1200, 900));
        setMinimumSize(new java.awt.Dimension(1200, 750));
        setPreferredSize(new java.awt.Dimension(1200, 750));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        txtActionInfo.setEditable(false);
        txtActionInfo.setBackground(new java.awt.Color(0, 0, 0));
        txtActionInfo.setColumns(20);
        txtActionInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtActionInfo.setForeground(new java.awt.Color(0, 204, 51));
        txtActionInfo.setRows(5);
        jScrollPane1.setViewportView(txtActionInfo);

        txtChromosomeInfo.setEditable(false);
        txtChromosomeInfo.setBackground(new java.awt.Color(0, 0, 0));
        txtChromosomeInfo.setColumns(20);
        txtChromosomeInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtChromosomeInfo.setForeground(new java.awt.Color(0, 204, 51));
        txtChromosomeInfo.setRows(5);
        jScrollPane2.setViewportView(txtChromosomeInfo);

        txtPointInfo.setEditable(false);
        txtPointInfo.setBackground(new java.awt.Color(0, 0, 0));
        txtPointInfo.setColumns(20);
        txtPointInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtPointInfo.setForeground(new java.awt.Color(0, 204, 51));
        txtPointInfo.setRows(5);
        jScrollPane3.setViewportView(txtPointInfo);

        txtGenerationInfo.setEditable(false);
        txtGenerationInfo.setBackground(new java.awt.Color(0, 0, 0));
        txtGenerationInfo.setColumns(20);
        txtGenerationInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtGenerationInfo.setForeground(new java.awt.Color(0, 204, 51));
        txtGenerationInfo.setRows(5);
        jScrollPane5.setViewportView(txtGenerationInfo);

        txtTankInfo.setEditable(false);
        txtTankInfo.setBackground(new java.awt.Color(0, 0, 0));
        txtTankInfo.setColumns(20);
        txtTankInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtTankInfo.setForeground(new java.awt.Color(0, 204, 51));
        txtTankInfo.setRows(5);
        txtTankInfo.setAutoscrolls(false);
        jScrollPane4.setViewportView(txtTankInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 748, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 22, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       
       
        
       // TODO add your handling code here:
        // update chromosome 
         
    }//GEN-LAST:event_formWindowOpened

    
    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseMoved

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        System.out.println("Click!");        // TODO add your handling code here:
        
    }//GEN-LAST:event_formMouseClicked

 
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea txtActionInfo;
    private javax.swing.JTextArea txtChromosomeInfo;
    private javax.swing.JTextArea txtGenerationInfo;
    private javax.swing.JTextArea txtPointInfo;
    private javax.swing.JTextArea txtTankInfo;
    // End of variables declaration//GEN-END:variables

      String actionInfo="";
      String chromosomeInfo="";
      String pointInfo = "";
      String tournamentInfo = "";
  public void update () {
       
      game.updateAutoGame();
   //  battleScreen.update(game);
   //  battleScreen.validate();
       try{
    String actionInfoA = "";
     String actionInfoB = "";
    {
       actionInfoA = "TEAM A\n";
       actionInfoA += game.getTeamA().getDecisionAction().getCommand()+"\n";
       actionInfoA += "("+game.getTeamA().getDecisionAction().getSource().getX()+","+game.getTeamA().getDecisionAction().getSource().getY()+")" ;
       actionInfoA += "("+game.getTeamA().getDecisionAction().getDestination().getX()+","+game.getTeamA().getDecisionAction().getDestination().getY()+")" ;
   }
  {
       actionInfoB += "TEAM B\n";
       actionInfoB += game.getTeamB().getDecisionAction().getCommand()+"\n";
       actionInfoB += "("+game.getTeamB().getDecisionAction().getSource().getX()+","+game.getTeamB().getDecisionAction().getSource().getY()+")" ;
       actionInfoB += "("+game.getTeamB().getDecisionAction().getDestination().getX()+","+game.getTeamB().getDecisionAction().getDestination().getY()+")" ;
   
   }
  String actionInfo;
  if (game.getSetting().getCurrentTeamAction()=="A") actionInfo = actionInfoB+"\n" + actionInfoA;
  else actionInfo = actionInfoA+"\n" + actionInfoB;
  
   
   tournamentInfo = "TOURNAMENT STATISTIC \n  GENERATION "+ game.getPopulation().getGeneration()+ "\n";
   for (int i =0; i < game.getPopulation().getNumOfChromosome(); i ++){
       tournamentInfo += "C"+(i+1) +" : "; 
       for (int j=0; j < Chromosome.numOfGen; j++)
       tournamentInfo +=game.getPopulation().getChromosomes()[i].getGen(j) + " ";
   tournamentInfo+=" POINT :  " + game.getPopulation().getChromosomes()[i].getPoint() +"\n";
   }
   

   chromosomeInfo ="BEST CHROMOSOME\n";
   chromosomeInfo+= game.getPopulation().getBestChromosome().getGen()[0] +" "+ game.getPopulation().getBestChromosome().getGen()[1]+" "+game.getPopulation().getBestChromosome().getGen()[2];
    chromosomeInfo+= "\n POINT:  " +game.getPopulation().getBestChromosome().getPoint();
   chromosomeInfo+= "\n FITNESS VALUE:  " +game.getPopulation().getBestChromosome().getFitnessValue();
    chromosomeInfo+= "\n AT "+ +game.getPopulation().getBestGeneration()+  "th GENERATION " ;
     chromosomeInfo+= "\n MUTATION: TRUE";
   
   
   pointInfo ="";
     pointInfo += "MONEY A : " + game.getTeamA().getMoney()+"\n";
   pointInfo += "MONEY B : " + game.getTeamB().getMoney() +"\n";
   pointInfo += "POINT A : " + game.getTeamA().getPoint() +"\n";
   pointInfo += "POINT B : " + game.getTeamB().getPoint() +"\n";
    pointInfo += "CURRENT TURN : " + game.getSetting().getCurrentActionTurn() +"\n";
   pointInfo += "CURRENT GAME : " + game.getCurrentGame() +"\n";
    pointInfo += "CURRENT GAME STATE : " + game.getSetting().getGameState()+"\n";
     
   // tank info
       // set tank info
       String tankA="";
       for (int i =0; i < game.getTeamA().getNumOfTank(); i ++)
           tankA += (game.getTeamA().getTanks()[i].getAmor() + " " + game.getTeamA().getTanks()[i].getDamange() + " " + game.getTeamA().getTanks()[i].getAttackRange())  
                    + " "+ game.getTeamA().getTanks()[i].getPosition().getX() +  " "+ game.getTeamA().getTanks()[i].getPosition().getY() +    "\n";
       String tankB="";
       for (int  i =0; i < game.getTeamB().getNumOfTank(); i ++)
           tankB += (game.getTeamB().getTanks()[i].getAmor() + " " + game.getTeamB().getTanks()[i].getDamange() + " " + game.getTeamB().getTanks()[i].getAttackRange())  
                    + " " +game.getTeamB().getTanks()[i].getPosition().getX() +  " "+ game.getTeamB().getTanks()[i].getPosition().getY() +    "\n";
        
   
   
     this.txtActionInfo.setText(actionInfo );
     this.txtChromosomeInfo.setText(chromosomeInfo);
     this.txtPointInfo.setText(pointInfo);
     this.txtGenerationInfo.setText(tournamentInfo);
     this.txtTankInfo.setText( tankA +"\n\n"+tankB );
   }
   catch(Exception ex) {}
}

  
    
}
